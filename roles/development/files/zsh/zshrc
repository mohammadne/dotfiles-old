# -------------------------------------------------------------- Tmux

# tmux new session (create a new one)
function tns() {
  session_name=$1

  # get basename of the current directory
  if [ -z "$session_name" ]; then session_name=${PWD##*/}; fi

  # create a new new-session based on current working directory
  if ! tmux has-session -t "$session_name" 2> /dev/null; then
    TMUX='' tmux new-session -s "$session_name" -d
  fi

  # attach if outside of tmux, switch if you're in tmux.
  if [ -z "$TMUX" ]; then
    tmux attach -t "$session_name"
  else
    tmux switch-client -t "$session_name"
  fi
}

# tmux select session (delete current one)
function tss() {
  # use built in choose-tree if being inside a session
  if [ ! -z "$TMUX" ]; then (tmux choose-tree -Zs &); return; fi

  # get session names (ignore error if no session exist)
  sessions=$(tmux ls -F '#S' 2> /dev/null)

  # return if no session exist
  if [ -z "$sessions" ]; then echo "there is no session available"; return; fi

  # select a session between sessions
  select session_name in $sessions; do break; done

  # return in case of invalid selection
  if [ -z "$session_name" ]; then echo "invalid session selected"; exit 1; fi

  # switch into new session
  tns "$session_name"
}

# tmux kill session (delete current one)
function tks() {
  session_name=$1

  # set session_name if not given
  if [ -z "$session_name" ]; then
    # return if not in a session
    if [ -z "$TMUX" ]; then return 0; fi

    # get current session name
    session_name=$(tmux display-message -p '#S')
  fi

  # kill session_name if available
  tmux kill-session -t "$session_name" 2> /dev/null
}

# --------------------------------------------------------------------------------------- Proxy

function proxy_on() {
  export http_proxy="http://mohammadnasr:1Sdz827jtaWvR4aA@zagroxy.insiders.sotoon.ir:3832"
  export https_proxy="http://mohammadnasr:1Sdz827jtaWvR4aA@zagroxy.insiders.sotoon.ir:3832"
  export no_proxy="localhost,127.0.0.1"
}

function proxy_off() {
  http_proxy=""
  https_proxy=""
  no_proxy=""
}

# --------------------------------------------------------------------------------------- P10K

# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# -------------------------------------------------------------- Plugins

export ZSH="$HOME/.config/oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k" # set theme

# list of all plugins: https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins
plugins=(
  # zsh-users plugins
  history-substring-search # ZSH port of Fish history search. Begin typing command, use up arrow to select previous use
  zsh-autosuggestions # Suggests commands based on your history
  zsh-completions # More completions
  zsh-syntax-highlighting # Fish shell like syntax highlighting for Zsh
  
  # theming
  colored-man-pages
  
  # development plugins
  git docker kubectl ansible vagrant
  
  # programming languages
  golang python rust
)

autoload -U compinit && compinit # reload completions for zsh-completions

export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5' # Colorize autosuggest

source $ZSH/oh-my-zsh.sh # required to load oh-my-zsh

# -------------------------------------------------------------- Environments

# zsh related
alias zshconfig="$EDITOR ~/.zshrc"
alias ohmyzsh="$EDITOR ~/.oh-my-zsh"

# replace ls with exa
alias ls='exa --color=always --group-directories-first --icons'       # preferred listing
alias ll='exa -alF --color=always --group-directories-first --icons'  # long format
alias la='exa -a --color=always --group-directories-first --icons'    # all files and dirs
alias lt='exa -aT --color=always --group-directories-first --icons'   # tree listing
alias l.="exa -a | egrep '^\.'"                                       # show only dotfiles

# replace cat with bat
if command -v bat &>/dev/null; then
  alias cat='bat --style header --style snip --style changes --style header'
fi

# common use
alias r="source ~/.zshenv && source ~/.zshrc"
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
# alias ip="ip -color"
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias wget='wget -c '
alias hw='hwinfo --short'

alias grubup="sudo update-grub"
alias fixpacman="sudo rm /var/lib/pacman/db.lck"

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# cleanup orphaned packages
alias cleanup='sudo pacman -Rns (pacman -Qtdq)'

# get the error messages from journalctl
alias jctl="journalctl -p 3 -xb"

# recent installed packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"

# -------------------------------------------------------------- Miscellaneous

# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}

zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# https://github.com/zsh-users/zsh-autosuggestions/issues/351
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste accept-line)

# To customize prompt, run `p10k configure` or edit ~/.config/p10k.zsh.
[[ ! -f ~/.config/p10k.zsh ]] || source ~/.config/p10k.zsh

